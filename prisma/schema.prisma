// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PhoneLabel {
  primary
  secondary
  husband
  wife
  son
  daughter
  property_manager
  attorney
  tenant
  grandson
  granddaughter
  other
}

model Property {
  id                    String    @id @default(uuid())
  street_address        String
  city                  String
  zip_code              Int
  state                 String?   // Made optional initially to handle existing records
  parcel_id             String?   @unique
  net_operating_income  Int
  price                 Int
  return_on_investment  Int
  number_of_units       Int
  square_feet           Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  images                PropertyImage[]
  owners                Owner[]   @relation("PropertyToOwner")
  coordinates           Coordinate?
  notes                 Note[]

  @@map("properties")
}

model Coordinate {
  id          String   @id @default(uuid())
  property_id String   @unique
  latitude    Float
  longitude   Float
  confidence  String   // 'high', 'medium', 'low'
  place_id    String?  // Google Place ID for future reference
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  
  @@map("coordinates")
}

model Owner {
  id              String     @id @default(uuid())
  first_name      String
  last_name       String
  full_name       String?    // For cases where we have a single name field
  llc_contact     String?    // LLC Contact information
  street_address  String?
  city            String?
  state           String?
  zip_code        String?
  phone_number    String?    // Keep existing for backward compatibility
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  properties      Property[] @relation("PropertyToOwner")
  contacts        Contact[]
}

model Contact {
  id        String     @id @default(uuid())
  phone     String?    // Optional phone number
  email     String?    // Optional email address
  type      String     // Required type: Email, Cell, Home, Work, etc.
  label     PhoneLabel? // Phone label for categorization
  priority  Int        // Priority for ordering (lower number = higher priority)
  notes     String?    // Optional notes field
  owner_id  String     // Foreign key to Owner
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  owner Owner @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  
  @@unique([owner_id, type, priority]) // Ensure unique priority per type per owner
  @@map("contacts")
}

model User {
  id              String    @id @default(cuid())
  first_name      String?
  last_name       String?
  email           String    @unique
  password        String?
  email_verified  DateTime?
  image           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                   String  @id @default(cuid())
  user_id              String
  type                 String
  provider             String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PropertyImage {
  id          String   @id @default(uuid())
  property_id String
  url         String
  alt         String?
  order       Int      @default(0)
  created_at  DateTime @default(now())
  
  property Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  
  @@map("property_images")
}

model Note {
  id          String   @id @default(uuid())
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  property_id String
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@map("notes")
}