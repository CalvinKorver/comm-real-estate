// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Property {
  id                    String    @id @default(uuid())
  street_address        String
  city                  String
  zip_code              Int
  state                 String?   // Made optional initially to handle existing records
  parcel_id             String?   @unique
  net_operating_income  Int
  price                 Int
  return_on_investment  Int
  number_of_units       Int
  square_feet           Int
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  images                PropertyImage[]
  owners                Owner[]   @relation("PropertyToOwner")

  @@map("properties")
}

model Owner {
  id            String     @id @default(uuid())
  firstName     String
  lastName      String
  fullName      String?    // For cases where we have a single name field
  llcContact    String?    // LLC Contact information
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  phoneNumber   String?    // Keep existing for backward compatibility
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  properties    Property[] @relation("PropertyToOwner")
  contacts      Contact[]
}

model Contact {
  id        String   @id @default(uuid())
  phone     String?  // Optional phone number
  email     String?  // Optional email address
  type      String   // Required type: Email, Cell, Home, Work, etc.
  priority  Int      // Priority for ordering (lower number = higher priority)
  ownerId   String   // Foreign key to Owner
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  owner Owner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@unique([ownerId, type, priority]) // Ensure unique priority per type per owner
  @@map("contacts")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String
  alt        String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_images")
}