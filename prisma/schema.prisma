// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Workout {
  id          String    @id @default(uuid())
  name        String
  isFavorite  Boolean   @default(false)
  isActive    Boolean   @default(true)
  imageName   String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  blocks      Block[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("workouts")

}

model Block {
  id            String          @id @default(uuid())
  blockType     BlockType
  workoutId     String
  workout       Workout         @relation(fields: [workoutId], references: [id])
  
  // Metric information
  metricType    MetricType?
  distance      Float?
  distanceUnit  DistanceUnit?
  duration      Int?            // in seconds
  
  // Work block specific fields
  repeats       Int?
  paceConstraint PaceConstraint?
  
  // Rest block relationship
  restBlockId   String?
  restBlock     Block?          @relation("RestBlock", fields: [restBlockId], references: [id])
  workBlocks    Block[]         @relation("RestBlock")
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("blocks")
}

model PaceConstraint {
  id        String        @id @default(uuid())
  duration  Int
  unit      DistanceUnit
  blockId   String        @unique
  block     Block         @relation(fields: [blockId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("pace_constraints")
}

enum BlockType {
  WARMUP
  COOLDOWN
  WORK
  REST
}

enum MetricType {
  DISTANCE
  TIME
}

enum DistanceUnit {
  METERS
  KILOMETERS
  MILES
  YARDS
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}